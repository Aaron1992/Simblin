* Style orientation http://demo.jimbarraud.com/manifest/

* Learn about python's with statement
* Delete Entries (but with confirmation)
* Next/prev links on all Pages (so that e.g. only alwas 5 posts shown)
* Tag support (at least /tag/blabla shows all posts with tag blabla)
* Preview
* Pylint
* Add possiblity to load real settings.cfg
* Polish Templates/CSS
* Refactor/Tests/Document/Readme/Changelog
* Test looks on firefox/opera and ggf. improve (buttons)
* Input from Community what to refactor (mailinglist??)

-> v0.1
-> github

----------------

* http://blog.disqus.net/2007/03/11/a-django-primer/
* http://blog.jeffhui.net/2009/03/django-blog-tutorial/
* Look for other Blog Tutorials
* Only show login/compose on mouseover
* Tab key does indent in compose editor
* Use WTForms: http://flask.pocoo.org/docs/patterns/wtforms/
* DB Design: http://www.bkent.net/Doc/simple5.htm
* Category Support
* Page creation
** Composing pages
** Have no comments
** Order Pages by `place` field
* Ordering of Blog posts, e.g. (Archive Page creation)
** max 5 Entries Home Page ordererd by date
** Monghtly/Yearly archive
** Filter by Tag
** Filter by Category
** Show all tags and number of posts for a tag
* Proper Logging (read flask logging docs)
* Refactor/Tests/Document/Readme/Changelog

-> v0.2
-> Deployment http://clemesha.org/blog/2009/jul/05/modern-python-hacker-tools-virtualenv-fabric-pip/
   http://flask.pocoo.org/docs/patterns/fabric/
   http://flask.pocoo.org/docs/config/#config
   http://flask.pocoo.org/docs/deploying/mod_wsgi/

----------------

* Pingback/Traceback (or does Disqus already do that?)
* Images / File Attachments
** How to store them?
*** maybe create a subvie /files, where one can upload and be able to link to them in the blog post
* Comments (Disqus) or own
* Refactor/Tests/Document/Readme/Changelog

-> v0.3

----------------

future:
* Put hardcoded Messages in config file
* statistics
* own comments
* search
* feeds
* Add smarty pants ``''
